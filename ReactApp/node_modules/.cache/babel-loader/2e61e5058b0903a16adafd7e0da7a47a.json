{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\SourceControl\\\\idscango-web\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\SourceControl\\\\idscango-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport ApiService from \"../../services/api/api\";\nimport { history } from './../../store';\nimport MedicScanService from \"../../services/api/medicScan\";\nexport function processID(instanceID) {\n  return function (dispatch) {\n    ApiService.getResults(instanceID).then(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(res) {\n        var documentObj, base64FaceReformattedImage, base64SignatureReformattedImage, dataObject, type, idAuthentication, chunk, faceImageResult, faceImageResultArray, rawFaceImage, faceImageResultSubArray, _chunk, i, j, signatureImageResult, signatureImageResultArray, rawSignatureImage, signatureImageResultSubArray, _i, _j;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                documentObj = res;\n                base64FaceReformattedImage = null;\n                base64SignatureReformattedImage = null;\n                dataObject = {};\n\n                if (!(documentObj.Fields.length > 0)) {\n                  _context.next = 59;\n                  break;\n                }\n\n                /**\r\n                 * Pass processed data to our data object\r\n                 */\n                documentObj.Fields.map(function (field) {\n                  dataObject[field.Name] = field.Value;\n                });\n                type = res.Result;\n                idAuthentication = null;\n                _context.t0 = type;\n                _context.next = _context.t0 === 0 ? 11 : _context.t0 === 1 ? 13 : _context.t0 === 2 ? 15 : _context.t0 === 3 ? 17 : _context.t0 === 4 ? 19 : _context.t0 === 5 ? 21 : 23;\n                break;\n\n              case 11:\n                idAuthentication = 'Unknown';\n                return _context.abrupt(\"break\", 25);\n\n              case 13:\n                idAuthentication = 'Passed';\n                return _context.abrupt(\"break\", 25);\n\n              case 15:\n                idAuthentication = 'Failed';\n                return _context.abrupt(\"break\", 25);\n\n              case 17:\n                idAuthentication = 'Skipped';\n                return _context.abrupt(\"break\", 25);\n\n              case 19:\n                idAuthentication = 'Caution';\n                return _context.abrupt(\"break\", 25);\n\n              case 21:\n                idAuthentication = 'Attention';\n                return _context.abrupt(\"break\", 25);\n\n              case 23:\n                idAuthentication = 'Unknown';\n                return _context.abrupt(\"break\", 25);\n\n              case 25:\n                dataObject['Authentication'] = idAuthentication;\n                /**\r\n                 * Get face image from Acuant Service\r\n                 * Get signature image from Acuant Service\r\n                 * Initialize Photo & Signature with empty strings otherwise it will try to access the photo on the\r\n                 * Acuant servers\r\n                 *\r\n                 * We need async / await if in case something happens with the Photo / Signature. We'll want to\r\n                 * show the results no matter the results\r\n                 */\n\n                dataObject['Photo'] = '';\n                dataObject['Signature'] = '';\n                chunk = 5000;\n                _context.prev = 29;\n                _context.next = 32;\n                return ApiService.getFaceImage(instanceID);\n\n              case 32:\n                faceImageResult = _context.sent;\n                faceImageResultArray = new Uint8Array(faceImageResult);\n                rawFaceImage = '';\n                _chunk = 5000;\n\n                for (i = 0, j = faceImageResultArray.length; i < j; i += _chunk) {\n                  faceImageResultSubArray = faceImageResultArray.subarray(i, i + _chunk);\n                  rawFaceImage += String.fromCharCode.apply(null, faceImageResultSubArray);\n                }\n\n                base64FaceReformattedImage = btoa(rawFaceImage);\n                dataObject['Photo'] = \"data:image/jpeg;base64,\".concat(base64FaceReformattedImage);\n                _context.next = 43;\n                break;\n\n              case 41:\n                _context.prev = 41;\n                _context.t1 = _context[\"catch\"](29);\n\n              case 43:\n                _context.prev = 43;\n                _context.next = 46;\n                return ApiService.getSignatureImage(instanceID);\n\n              case 46:\n                signatureImageResult = _context.sent;\n                signatureImageResultArray = new Uint8Array(signatureImageResult);\n                rawSignatureImage = '';\n\n                for (_i = 0, _j = signatureImageResultArray.length; _i < _j; _i += chunk) {\n                  signatureImageResultSubArray = signatureImageResultArray.subarray(_i, _i + chunk);\n                  rawSignatureImage += String.fromCharCode.apply(null, signatureImageResultSubArray);\n                }\n\n                base64SignatureReformattedImage = btoa(rawSignatureImage);\n                dataObject['Signature'] = \"data:image/jpeg;base64,\".concat(base64SignatureReformattedImage);\n                _context.next = 56;\n                break;\n\n              case 54:\n                _context.prev = 54;\n                _context.t2 = _context[\"catch\"](43);\n\n              case 56:\n                dispatch({\n                  payload: dataObject,\n                  type: '@@acuant/ADD_ID_RESULT_DATA'\n                });\n                _context.next = 60;\n                break;\n\n              case 59:\n                history.push('/error/default');\n\n              case 60:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[29, 41], [43, 54]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).catch(function (err) {\n      history.push('/error/default');\n    });\n  };\n}\nexport function processMedicard(data) {\n  return function (dispatch) {\n    MedicScanService.getMedicScanResults({\n      instanceID: data.instanceID,\n      subscriptionID: data.subscriptionID\n    }).then(\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(res) {\n        var documentObj;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(res);\n                documentObj = res;\n\n                if (documentObj.FrontImage) {\n                  documentObj.FrontImage = \"data:image/jpeg;base64,\".concat(documentObj.FrontImage);\n                }\n\n                if (documentObj.BackImage) {\n                  documentObj.BackImage = \"data:image/jpeg;base64,\".concat(documentObj.BackImage);\n                }\n\n                dispatch({\n                  payload: documentObj,\n                  type: '@@acuant/ADD_ID_RESULT_DATA'\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()).catch(function (err) {\n      history.push('/error/default');\n    });\n  };\n}\nexport function resetProcessedData() {\n  return {\n    type: \"@@acuant/RESET_PROCESSED_DATA\"\n  };\n}","map":{"version":3,"sources":["C:\\SourceControl\\idscango-web\\src\\screens\\actions\\processDataActions.js"],"names":["ApiService","history","MedicScanService","processID","instanceID","dispatch","getResults","then","res","documentObj","base64FaceReformattedImage","base64SignatureReformattedImage","dataObject","Fields","length","map","field","Name","Value","type","Result","idAuthentication","chunk","getFaceImage","faceImageResult","faceImageResultArray","Uint8Array","rawFaceImage","i","j","faceImageResultSubArray","subarray","String","fromCharCode","apply","btoa","getSignatureImage","signatureImageResult","signatureImageResultArray","rawSignatureImage","signatureImageResultSubArray","payload","push","catch","err","processMedicard","data","getMedicScanResults","subscriptionID","console","log","FrontImage","BackImage","resetProcessedData"],"mappings":"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","sourcesContent":["import ApiService from \"../../services/api/api\";\r\nimport {history} from './../../store';\r\nimport MedicScanService from \"../../services/api/medicScan\";\r\n\r\nexport function processID(instanceID) {\r\n    return (dispatch) => {\r\n        ApiService\r\n            .getResults(instanceID)\r\n            .then(async res => {\r\n                var documentObj = res;\r\n                var base64FaceReformattedImage = null;\r\n                var base64SignatureReformattedImage = null;\r\n                let dataObject = {};\r\n                if (documentObj.Fields.length > 0) {\r\n\r\n                    /**\r\n                     * Pass processed data to our data object\r\n                     */\r\n\r\n                    documentObj.Fields.map(field => {\r\n                        dataObject[field.Name] = field.Value;\r\n                    });\r\n\r\n                    let type = res.Result;\r\n                    let idAuthentication = null;\r\n\r\n                    switch (type) {\r\n                        case 0 :\r\n                            idAuthentication = 'Unknown';\r\n                            break;\r\n                        case 1:\r\n                            idAuthentication = 'Passed';\r\n                            break;\r\n                        case 2:\r\n                            idAuthentication = 'Failed';\r\n                            break;\r\n                        case 3:\r\n                            idAuthentication = 'Skipped';\r\n                            break;\r\n                        case 4:\r\n                            idAuthentication = 'Caution';\r\n                            break;\r\n                        case 5:\r\n                            idAuthentication = 'Attention';\r\n                            break;\r\n                        default:\r\n                            idAuthentication = 'Unknown';\r\n                            break;\r\n                    }\r\n\r\n                    dataObject['Authentication'] = idAuthentication;\r\n\r\n                    /**\r\n                     * Get face image from Acuant Service\r\n                     * Get signature image from Acuant Service\r\n                     * Initialize Photo & Signature with empty strings otherwise it will try to access the photo on the\r\n                     * Acuant servers\r\n                     *\r\n                     * We need async / await if in case something happens with the Photo / Signature. We'll want to\r\n                     * show the results no matter the results\r\n                     */\r\n                    dataObject['Photo'] = '';\r\n                    dataObject['Signature'] = '';\r\n\r\n                    let chunk = 5000;\r\n                    try {\r\n                        const faceImageResult = await ApiService.getFaceImage(instanceID);\r\n                        let faceImageResultArray = new Uint8Array(faceImageResult);\r\n                        let rawFaceImage = '';\r\n                        let faceImageResultSubArray, chunk = 5000;\r\n                        for (let i = 0, j = faceImageResultArray.length; i < j; i += chunk) {\r\n                            faceImageResultSubArray = faceImageResultArray.subarray(i, i + chunk);\r\n                            rawFaceImage += String.fromCharCode.apply(null, faceImageResultSubArray);\r\n                        }\r\n                        base64FaceReformattedImage = btoa(rawFaceImage);\r\n                        dataObject['Photo'] = `data:image/jpeg;base64,${base64FaceReformattedImage}`;\r\n                    } catch (err) {\r\n\r\n                    }\r\n                    try {\r\n                        const signatureImageResult = await ApiService.getSignatureImage(instanceID);\r\n                        let signatureImageResultArray = new Uint8Array(signatureImageResult);\r\n                        let rawSignatureImage = '';\r\n                        let signatureImageResultSubArray;\r\n                        for (let i = 0, j = signatureImageResultArray.length; i < j; i += chunk) {\r\n                            signatureImageResultSubArray = signatureImageResultArray.subarray(i, i + chunk);\r\n                            rawSignatureImage += String.fromCharCode.apply(null, signatureImageResultSubArray);\r\n                        }\r\n\r\n                        base64SignatureReformattedImage = btoa(rawSignatureImage);\r\n\r\n                        dataObject['Signature'] = `data:image/jpeg;base64,${base64SignatureReformattedImage}`;\r\n                    } catch (err) {\r\n\r\n                    }\r\n\r\n                    dispatch({payload: dataObject, type: '@@acuant/ADD_ID_RESULT_DATA'});\r\n\r\n                } else {\r\n                    history.push('/error/default');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                history.push('/error/default')\r\n            });\r\n    }\r\n}\r\n\r\nexport function processMedicard(data) {\r\n    return (dispatch) => {\r\n        MedicScanService.getMedicScanResults({\r\n            instanceID: data.instanceID,\r\n            subscriptionID: data.subscriptionID\r\n        }).then(async res => {\r\n            console.log(res);\r\n            let documentObj = res;\r\n            if (documentObj.FrontImage) {\r\n                documentObj.FrontImage = `data:image/jpeg;base64,${documentObj.FrontImage}`;\r\n            }\r\n            if (documentObj.BackImage) {\r\n                documentObj.BackImage = `data:image/jpeg;base64,${documentObj.BackImage}`;\r\n            }\r\n            dispatch({payload: documentObj, type: '@@acuant/ADD_ID_RESULT_DATA'});\r\n        }).catch(err => {\r\n            history.push('/error/default')\r\n        })\r\n    }\r\n}\r\n\r\nexport function resetProcessedData() {\r\n    return {\r\n        type: \"@@acuant/RESET_PROCESSED_DATA\"\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}