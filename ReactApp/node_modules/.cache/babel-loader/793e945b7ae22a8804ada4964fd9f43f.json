{"ast":null,"code":"import _classCallCheck from \"C:\\\\SourceControl\\\\idscango-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\SourceControl\\\\idscango-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\SourceControl\\\\idscango-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\SourceControl\\\\idscango-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\SourceControl\\\\idscango-web\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\SourceControl\\\\idscango-web\\\\src\\\\screens\\\\Results\\\\MedicalCard.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport moment from \"moment\";\nimport { connect } from \"react-redux\";\nimport Processing from \"./../Processing\";\nimport { bindActionCreators } from \"redux\";\nimport { processMedicard } from \"./../actions/processDataActions\";\nimport { resetProcessedData } from \"../actions/processDataActions\";\nimport { resetConfig } from \"../actions/configActions\";\nimport { resetIDProperties } from \"../actions/idPropertiesActions\";\nimport Header from \"../Header\";\n\nvar MedicalCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MedicalCard, _Component);\n\n  function MedicalCard(props) {\n    _classCallCheck(this, MedicalCard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MedicalCard).call(this, props));\n  }\n\n  _createClass(MedicalCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var instanceID = this.props.instanceID;\n      this.props.processMedicard({\n        instanceID: instanceID,\n        subscriptionID: process.env.REACT_APP_SUBSCRIPTION_ID\n      });\n    }\n  }, {\n    key: \"resetStoreAndRedirect\",\n    value: function resetStoreAndRedirect() {\n      this.props.resetConfig();\n      this.props.resetIDProperties();\n      this.props.resetProcessedData();\n      this.props.history.push('/');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      if (!this.props.resultData) {\n        return React.createElement(Processing, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), this.props.resultData && React.createElement(\"div\", {\n        className: \"body column results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row results_id_sig\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"figure\", {\n        class: \"results_medcard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.props.resultData['FrontImage'].length > 0 && React.createElement(\"img\", {\n        alt: \"idscango\",\n        className: 'medical-card-front',\n        src: this.props.resultData['FrontImage'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), React.createElement(\"figure\", {\n        class: \"results_medcard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, this.props.resultData['BackImage'].length > 0 && React.createElement(\"img\", {\n        alt: \"idscango\",\n        className: 'medical-card-back',\n        src: this.props.resultData['BackImage'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"results_data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, Object.keys(this.props.resultData).map(function (key) {\n        if (_this.props.resultData[key].length > 0 && typeof _this.props.resultData[key] !== 'object' && key !== 'FrontImage' && key !== 'BackImage' && key !== 'RawText' && key !== 'TransactionTimestamp' && key !== 'MemberName') {\n          return React.createElement(\"div\", {\n            className: \"row\",\n            key: key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: \"type\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74\n            },\n            __self: this\n          }, key.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \")), React.createElement(\"div\", {\n            className: \"data\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75\n            },\n            __self: this\n          }, _this.props.resultData[key]));\n        }\n\n        if (_this.props.resultData[key].length > 0 && typeof _this.props.resultData[key] === 'object') {\n          return _this.props.resultData[key].map(function (collapsedObject) {\n            if (collapsedObject.Label && collapsedObject.Label.length > 0) {\n              return React.createElement(\"div\", {\n                className: \"row\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 81\n                },\n                __self: this\n              }, React.createElement(\"div\", {\n                className: \"type\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 82\n                },\n                __self: this\n              }, collapsedObject.Label), React.createElement(\"div\", {\n                className: \"data\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 83\n                },\n                __self: this\n              }, collapsedObject.Value));\n            }\n\n            if (!('Label' in collapsedObject)) {\n              return Object.keys(collapsedObject).map(function (collapsedObjectKey) {\n                if (collapsedObject[collapsedObjectKey] && collapsedObject[collapsedObjectKey].length > 0) {\n                  return React.createElement(\"div\", {\n                    className: \"row\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 89\n                    },\n                    __self: this\n                  }, React.createElement(\"div\", {\n                    className: \"type\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 90\n                    },\n                    __self: this\n                  }, collapsedObjectKey.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \")), React.createElement(\"div\", {\n                    className: \"data\",\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 91\n                    },\n                    __self: this\n                  }, collapsedObject[collapsedObjectKey]));\n                }\n              });\n            }\n          });\n        }\n      }))), React.createElement(\"a\", {\n        className: \"btn outline\",\n        onClick: function onClick() {\n          return _this.resetStoreAndRedirect();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: 'buttonBgText',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Home\")))));\n    }\n  }]);\n\n  return MedicalCard;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    instanceID: state.config.instanceID,\n    faceMatch: state.processedData.faceMatch,\n    resultData: state.processedData.result,\n    cardType: state.idProperties.cardType\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    processMedicard: processMedicard,\n    resetProcessedData: resetProcessedData,\n    resetConfig: resetConfig,\n    resetIDProperties: resetIDProperties\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MedicalCard);","map":{"version":3,"sources":["C:\\SourceControl\\idscango-web\\src\\screens\\Results\\MedicalCard.js"],"names":["React","Component","Fragment","Redirect","moment","connect","Processing","bindActionCreators","processMedicard","resetProcessedData","resetConfig","resetIDProperties","Header","MedicalCard","props","instanceID","subscriptionID","process","env","REACT_APP_SUBSCRIPTION_ID","history","push","resultData","length","Object","keys","map","key","match","join","collapsedObject","Label","Value","collapsedObjectKey","resetStoreAndRedirect","mapStateToProps","state","config","faceMatch","processedData","result","cardType","idProperties","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport {connect} from \"react-redux\";\r\nimport Processing from \"./../Processing\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {processMedicard} from \"./../actions/processDataActions\";\r\nimport {resetProcessedData} from \"../actions/processDataActions\";\r\nimport {resetConfig} from \"../actions/configActions\";\r\nimport {resetIDProperties} from \"../actions/idPropertiesActions\";\r\nimport Header from \"../Header\";\r\n\r\nclass MedicalCard extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let {instanceID} = this.props;\r\n        this.props.processMedicard({\r\n            instanceID: instanceID,\r\n            subscriptionID: process.env.REACT_APP_SUBSCRIPTION_ID\r\n        });\r\n    }\r\n\r\n    resetStoreAndRedirect() {\r\n        this.props.resetConfig();\r\n        this.props.resetIDProperties();\r\n        this.props.resetProcessedData();\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.resultData) {\r\n            return <Processing/>\r\n        }\r\n        return(\r\n            <Fragment>\r\n\r\n                <Header/>\r\n\r\n                {this.props.resultData &&\r\n\r\n                <div className='body column results'>\r\n\r\n                    <div className='wrapper'>\r\n\r\n                        <div className='row results_id_sig'>\r\n\r\n                            <figure class='results_medcard'>\r\n                                {this.props.resultData['FrontImage'].length > 0 && <img alt='idscango' className={'medical-card-front'} src={this.props.resultData['FrontImage']}/>}\r\n                            </figure>\r\n\r\n                            <figure class='results_medcard'>\r\n                                {this.props.resultData['BackImage'].length > 0 && <img alt='idscango' className={'medical-card-back'} src={this.props.resultData['BackImage']}/>}\r\n                            </figure>\r\n\r\n                        </div>\r\n\r\n                        <div className='results_data'>\r\n\r\n                            <ul>\r\n\r\n                                {Object.keys(this.props.resultData).map(key => {\r\n                                    if(this.props.resultData[key].length > 0\r\n                                        && typeof this.props.resultData[key] !== 'object'\r\n                                        && key !== 'FrontImage'\r\n                                        && key !== 'BackImage'\r\n                                        && key !== 'RawText'\r\n                                        && key !== 'TransactionTimestamp'\r\n                                        && key !== 'MemberName') {\r\n                                            return <div className='row' key={key}>\r\n                                                <div className='type'>{key.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \")}</div>\r\n                                                <div className='data'>{this.props.resultData[key]}</div>\r\n                                            </div>\r\n                                    }\r\n                                    if (this.props.resultData[key].length > 0 && typeof this.props.resultData[key] === 'object') {\r\n                                        return this.props.resultData[key].map(collapsedObject => {\r\n                                            if (collapsedObject.Label && collapsedObject.Label.length > 0) {\r\n                                                return <div className='row'>\r\n                                                    <div className='type'>{collapsedObject.Label}</div>\r\n                                                    <div className='data'>{collapsedObject.Value}</div>\r\n                                                </div>\r\n                                            }\r\n                                            if (!('Label' in collapsedObject)) {\r\n                                                return Object.keys(collapsedObject).map(collapsedObjectKey => {\r\n                                                    if (collapsedObject[collapsedObjectKey] && collapsedObject[collapsedObjectKey].length > 0) {\r\n                                                        return <div className='row'>\r\n                                                            <div className='type'>{collapsedObjectKey.match(/[A-Z][a-z]+|[0-9]+/g).join(\" \")}</div>\r\n                                                            <div className='data'>{collapsedObject[collapsedObjectKey]}</div>\r\n                                                        </div>\r\n                                                    }\r\n                                                });\r\n                                            }\r\n                                        });\r\n\r\n                                    }\r\n                                })}\r\n\r\n                            </ul>\r\n\r\n                        </div>\r\n\r\n                        <a className='btn outline' onClick={() => this.resetStoreAndRedirect()}>\r\n                            <p className={'buttonBgText'}>Home</p>\r\n                        </a>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                }\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        instanceID: state.config.instanceID,\r\n        faceMatch: state.processedData.faceMatch,\r\n        resultData: state.processedData.result,\r\n        cardType: state.idProperties.cardType\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({processMedicard, resetProcessedData, resetConfig, resetIDProperties}, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MedicalCard);"]},"metadata":{},"sourceType":"module"}